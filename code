ode* merge(Node* a, Node* b)
{

    // If first linked list is empty then second
    // is the answer
    if (a == NULL)
        return b;

    // If second linked list is empty then first
    // is the result
    if (b == NULL)
        return a;

    // Compare the data members of the two linked
    // lists and put the larger one in the result
    Node* result;

    if (a->data < b->data) {
        result = a;
        result->bottom = merge(a->bottom, b);
    }

    else {
        result = b;
        result->bottom = merge(a, b->bottom);
    }
    result->next = NULL;
    return result;
}

Node* flatten(Node* root)
{

    // Base Cases
    if (root == NULL || root->next == NULL)
        return root;

    // Recur for list on right
    root->next = flatten(root->next);

    // Now merge
    root = merge(root, root->next);

    // Return the root
    // it will be in turn merged with its left
    return root;
}
